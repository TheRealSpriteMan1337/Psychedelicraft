buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
dependencies {
    classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
        changing = true
        }
    }
}

apply plugin: 'forge'

version = "1.5.2"
def ENV = System.getenv()
if (ENV.DRONE_BUILD_NUMBER) {
    version += ".n" + ENV.DRONE_BUILD_NUMBER
}

group= "ivorius.psychedelicraft" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Psychedelicraft"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}

jar {
    manifest {
        attributes 'FMLCorePlugin': 'ivorius.psychedelicraftcore.PsychedelicraftLoadingPlugin',
                'FMLCorePluginContainsFMLMod': 'true'
    }
}

// Provided - Start
// FML doesnt laod coremods and ATs from the classpath

apply plugin: 'idea'

configurations {
    provided
//    provided.extendsFrom(compile)
}

sourceSets {
    main {
        compileClasspath += [configurations.provided]
        output.resourcesDir = output.classesDir
    }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

// Provided - Stop

idea.module.inheritOutputDirs = true

dependencies {
    provided 'ivorius.ivtoolkit:IvToolkit:1.2:dev'
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version':project.version, 'mcversion':project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

// FML doesnt laod coremods and ATs from the classpath
task copyMods(type: Copy, dependsOn: "extractUserDev") {
    from { configurations.provided }
    include "**/*.jar"
    into file(minecraft.runDir + "/mods")
    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}
tasks.setupDevWorkspace.dependsOn copyMods
tasks.setupDecompWorkspace.dependsOn copyMods

runClient {
    jvmArgs '-Dfml.coreMods.load=ivorius.psychedelicraftcore.PsychedelicraftLoadingPlugin'
}
runServer {
    jvmArgs '-Dfml.coreMods.load=ivorius.psychedelicraftcore.PsychedelicraftLoadingPlugin'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'

    manifest {
        attributes 'FMLCorePlugin': 'ivorius.psychedelicraftcore.PsychedelicraftLoadingPlugin',
                'FMLCorePluginContainsFMLMod': 'true'
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'

    manifest {
        attributes 'FMLCorePlugin': 'ivorius.psychedelicraftcore.PsychedelicraftLoadingPlugin',
                'FMLCorePluginContainsFMLMod': 'true'
    }
}

artifacts {
    archives sourceJar
    archives deobfJar
}

uploadArchives() {
    dependsOn reobf

    if (project.hasProperty("mavenUrl") && project.hasProperty("mavenUser") && project.hasProperty("mavenPassword")) {
        repositories {
            logger.info('Publishing to files server')

            mavenDeployer {

                repository(url: project."mavenUrl") {
                    authentication(userName: project."mavenUser", password: project."mavenPassword")
                }

                addFilter('deobf') {artifact, file ->
                    artifact.attributes['classifier'] == 'dev'
                }
                pom('deobf').version = project.version
                addFilter('sources') {artifact, file ->
                    artifact.attributes['classifier'] == 'sources'
                }
                pom('sources').version = project.version
                addFilter('universal') {artifact, file ->
                    artifact.attributes['classifier'] == null
                }
                pom('universal').version = project.version

                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'Adds drugs to the game minecraft'
                        url 'https://github.com/Ivorforce/Psychedelicraft'

                        scm {
                            url 'scm:git:git@github.com:Ivorforce/Psychedelicraft.git'
                            connection 'scm:git:git@github.com:Ivorforce/Psychedelicraft.git'
                            developerConnection 'scm:git:git@github.com:Ivorforce/Psychedelicraft.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/Ivorforce/Psychedelicraft/issues'
                        }

                        developers {
                            developer {
                                id 'Ivorius'
                                name 'Ivorius'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        logger.log(LogLevel.ERROR, 'No upload variables defined!');
    }
}
